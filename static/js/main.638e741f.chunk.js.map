{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","products","product","name","price","getProducts","_","setState","showLoading","fetch","then","response","json","data","productFetchError","catch","err","console","error","addProduct","method","headers","body","JSON","stringify","deleteProduct","id","putProduct","renderProduct","product_id","key","onClick","e","this","log","className","map","type","value","placeholder","onChange","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.638e741f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport './App.css';\r\nimport './Loading.css';\r\n\r\nclass App extends Component {\r\n  \r\n  state = {\r\n    products: [],\r\n    product: {\r\n      name: 'sample product',\r\n      price: 50\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n   this.getProducts(); \r\n  }\r\n\r\n  getProducts = _ => {\r\n    this.setState({showLoading: true})\r\n    fetch('//node-create-server.herokuapp.com/products')\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        this.setState({products: response.data})\r\n        this.setState({productFetchError: false})\r\n      })\r\n      .catch(err => {\r\n        console.error(err)\r\n        this.setState({productFetchError: true})\r\n      })\r\n      .then( _ => this.setState({showLoading: false}))\r\n  }\r\n\r\n  async getProductsEs7() {\r\n    try {\r\n      let response = await fetch('//node-create-server.herokuapp.com/products')\r\n      let {data} = await response.json()\r\n      console.log(data)\r\n      this.setState({products: data})\r\n    }\r\n    catch(error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  addProduct = _ => {\r\n    this.setState({showLoading: true})\r\n    const {product} = this.state\r\n\r\n    fetch('//node-create-server.herokuapp.com/products/add', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8'\r\n      },\r\n      body: JSON.stringify(product)\r\n    })\r\n      .then(this.getProducts)\r\n      .catch(err => console.error(err))\r\n      .then( _ => this.setState({showLoading: false}))\r\n  }\r\n\r\n  deleteProduct = id => {\r\n    this.setState({showLoading: true})\r\n    fetch(`//node-create-server.herokuapp.com/products/delete/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8'\r\n      },\r\n    })\r\n      .then(this.getProducts)\r\n      .catch(err => {\r\n        console.error(err)\r\n        this.setState({productFetchError: true})\r\n      })\r\n      .then( _ => this.setState({showLoading: false}))\r\n  }\r\n\r\n  putProduct = id => {\r\n    const {product} = this.state\r\n\r\n    this.setState({showLoading: true})\r\n    fetch(`//node-create-server.herokuapp.com/products/put/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8'\r\n      },\r\n      body: JSON.stringify(product)\r\n    })\r\n      .then(this.getProducts)\r\n      .catch(err => {\r\n        console.error(err)\r\n        this.setState({productFetchError: true})\r\n      })\r\n      .then( _ => this.setState({showLoading: false}))\r\n  }\r\n\r\nrenderProduct = ( {product_id, name, price} ) => <li key={product_id}>{product_id}.{name} - ${price}<span onClick={e => this.deleteProduct(product_id)} >X</span></li>\r\n\r\n  render() {\r\n    const {products, product, productFetchError, showLoading} = this.state\r\n    return (\r\n      <div className=\"App\">\r\n        <ul>\r\n          {productFetchError ? <li>Fetch product fail, something went wrong...</li> : products.map(this.renderProduct)}\r\n        </ul>\r\n\r\n        <div>\r\n          <input type=\"text\" \r\n            value={product.name} \r\n            placeholder=\"Product name...\" // destructing product inside state then merge by using spread syntax\r\n            onChange={ e => this.setState({ product: {...product, name: e.target.value} }) } />          \r\n          <input type=\"text\" \r\n            value={product.price} \r\n            placeholder=\"Product name...\"\r\n            onChange={ e => this.setState({ product: {...product, price: e.target.value} }) } />\r\n          <button onClick={this.addProduct}>Add Product</button>\r\n        </div>\r\n        {showLoading ? <div className=\"loading\">Loading&#8230;</div> : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}